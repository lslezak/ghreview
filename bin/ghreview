#!/usr/bin/env ruby
# frozen_string_literal: true

# This script is intended for mass review of the same (or very similar)
# GitHub pull requests.
#
# The script displays the details about the specified pull requests
# (the title, diff, Travis status). If everything is fine you can approve the
# pull request and optionally merge it and remove the source branch by entering
# "y" or just pressing [Enter] when it asks for approval.
#
# It can only approve the pull requests, if you do not want to
# approve a pull request you need to skip it and comment manually
# at the GitHub pull request web page.
#

require "octokit"
require "open-uri"
require "optparse"
require "rainbow"

# the default options
merge_pr = false
delete_branch = false
message = "LGTM"
file = nil

# parse the command line options
OptionParser.new do |parser|
  parser.banner = "Usage: #{$PROGRAM_NAME} [options] PR_URL1 PR_URL2 ..."

  parser.on("-f", "--file FILE", "Read the list of pull requests from file") do |f|
    file = f
  end

  parser.on("-g", "--merge", "Merge the approved pull requests") do |m|
    merge_pr = m
  end

  parser.on("-d", "--delete", "Delete the source branch after merging (forks are skipped)") do |d|
    delete_branch = d
  end

  parser.on("-m", "--message MESSAGE", "Approving message (default: \"#{message}\")") do |m|
    message = m
  end
end.parse!

def print_hr
  puts Rainbow("-" * 79).yellow
end

def create_github_client
  # path to ~/.netrc
  netrc = File.join(Dir.home, ".netrc")

  # configure the GitHub authentication
  # see https://github.com/octokit/octokit.rb#authentication
  client_options = if ENV["GH_TOKEN"]
    { access_token: ENV["GH_TOKEN"] }
  elsif File.exist?(netrc) && File.read(netrc).match(/^machine api.github.com/)
    { netrc: true }
  else
    warn "ERROR: Github authentication not set"
    exit 1
  end

  client = Octokit::Client.new(client_options)
  client.auto_paginate = true
  client
end

def print_pull_summary(pr_url, title)
  puts
  print_hr
  puts "Pull request #{Rainbow(pr_url).cyan}"
  puts "Title: #{title}"
  print_hr
end

def print_pull_diff(diff_url)
  # this follows redirects
  URI.open(diff_url) do |f|
    f.each_line do |line|
      # print colored diff
      if line.start_with?("+++ ") || line.start_with?("--- ")
        print Rainbow(line).cyan
      elsif line.start_with?("+")
        print Rainbow(line).green
      elsif line.start_with?("-")
        print Rainbow(line).red
      else
        print line
      end
    end
  end

  print_hr
end

# display the status (Travis)
def print_pull_status(client, status_url, repo, pr)
  if status_url =~ /https:\/\/api.github.com\/repos\/.*\/statuses\/(.*)/ &&
      (sha = Regexp.last_match[1])

    status = client.status(repo, sha)
    color = (status[:state] == "success") ? :green : :red
    puts "Overall Status: " + Rainbow((status[:state]).to_s).color(color)

    if status[:state] != "success"
      status[:statuses].each do |st|
        color = (st[:state] == "success") ? :green : :red
        puts Rainbow("    #{st[:state]}: #{st[:description]}").color(color)
      end
    end
  end

  # print the already existing reviews, maybe somebody has already approved/rejected
  client.pull_request_reviews(repo, pr).each do |r|
    puts "#{r[:state]} by #{r[:user][:login]}"
  end

  print_hr
end

def ask_for_approval
  print "\nApprove it? [Y/n] "

  input = nil
  loop do
    input = $stdin.gets.strip
    break if ["Y", "y", "N", "n", ""].include?(input)

    print "Invalid input\nApprove it? [Y/n] "
  end

  # assume approval by default, just pressing [Enter] (empty string) is enough
  ["Y", "y", ""].include?(input)
end

def approve_pull(client, pull, message, repo, pr, delete_branch, merge_pr)
  options = { event: "APPROVE", body: message }
  puts "Approving #{repo} ##{pr}..."
  client.create_pull_request_review(repo, pr, options)

  return unless merge_pr

  puts "Merging #{repo} ##{pr}..."
  client.merge_pull_request(repo, pr)

  return unless delete_branch

  # we cannot delete the source branch from a fork (different owner)
  return if pull[:head][:repo][:fork]

  branch = pull[:head][:ref]
  puts "Deleting #{branch} branch in #{repo}..."
  client.delete_branch(repo, branch)
end

def process_pull(client, pr_url, repo, pr, message, delete_branch, merge_pr)
  pull = client.pull_request(repo, pr)

  print_pull_summary(pr_url, pull[:title])
  print_pull_diff(pull[:diff_url])
  print_pull_status(client, pull[:statuses_url], repo, pr)

  if pull[:merged]
    puts Rainbow("Already merged").bright.yellow
  elsif pull[:closed_at]
    puts Rainbow("Already closed").bright.yellow
  elsif ask_for_approval
    approve_pull(client, pull, message, repo, pr, delete_branch, merge_pr)
  end
end

def process_url(client, url, message, delete_branch, merge_pr)
  if url =~ /^https:\/\/github.com\/(\S+)\/pull\/(\d+)/
    repo = Regexp.last_match[1]
    pr = Regexp.last_match[2]
    process_pull(client, url, repo, pr, message, delete_branch, merge_pr)
  else
    puts "#{url.inspect} is not a GitHub pull request URL, skipping"
  end
end

client = create_github_client
ARGV.each do |url|
  process_url(client, url, message, delete_branch, merge_pr)
end

return unless file

File.open(file, "r").each_line do |line|
  process_url(client, line, message, delete_branch, merge_pr)
end
